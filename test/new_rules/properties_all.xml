<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="properties.xsl"?>
<!-- MMT_Security Copyright (C) 2014  Montimage Description: Detection of attacks in BGPost honeypot-->
<beginning>

<!-- Property 1: Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="1" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Property 2: Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="2" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.2)&amp;&amp;(ip.src == ip.dst.2))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.2)&amp;&amp;(ip.src == ip.src.2))))"/>
</property>

<!-- Property 3: Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="3" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->

<!-- Property 4: One ARP request receives two replies with different MAC addresses.-->
 
<property value="THEN" delay_units="m" delay_min="0+" delay_max="5" property_id="4" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
    <operator value="THEN" delay_units="m" delay_min="0+" delay_max="5">
      <event value="COMPUTE" event_id="1" 
             description="An arp who was requested"
             boolean_expression="((arp.ar_op == 1)&amp;&amp;(ethernet.src != ethernet.dst))"/>
      <event value="COMPUTE" event_id="2" 
             description="An arp reply with MAC address"
             boolean_expression="((arp.ar_op == 2)&amp;&amp;((arp.ar_sip == arp.ar_tip.1)&amp;&amp;(ethernet.src != ethernet.dst)))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="An arp reply but with different MAC address"
           boolean_expression="((arp.ar_op == 2)&amp;&amp;((arp.ar_sip == arp.ar_tip.1)&amp;&amp;((arp.ar_sha != arp.ar_sha.2)&amp;&amp;(ethernet.src != ethernet.dst))))"/>
</property>

<!-- Property 5: Two ARP replies that should provide the same MAC address are different. This rule is simpler than Property 1 
                 above and detects the same potential attacks without generating a message for each combination of request-reply.-->

 <property value="THEN" delay_units="m" delay_min="0+" delay_max="5" property_id="5" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
      <event value="COMPUTE" event_id="1" 
             description="An arp reply with MAC address"
             boolean_expression="((arp.ar_op == 2)&amp;&amp;(ethernet.src != ethernet.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="An arp reply but with different MAC address"
           boolean_expression="((arp.ar_op == 2)&amp;&amp;((arp.ar_sip == arp.ar_sip.1)&amp;&amp;((arp.ar_sha != arp.ar_sha.1)&amp;&amp;(ethernet.src != ethernet.dst))))"/>
</property>


<!-- Property 6: 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="6" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst == ip.dst)&amp;&amp;((ip.src == ip.src)&amp;&amp;(tcp.seq_nb == tcp.seq_nb))))"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>

<!-- Property 7: R4_Decod_1a : TCP RST is invalid if there is no corresponding TCP ACK (tcp.flags == 16) before belonging to the same session containing correct seq_nb and ack_nb .-->
<property value="THEN" delay_units="s" delay_min="-1" delay_max="0-" property_id="7" type_property="ATTACK" 
    description="R4_Decod_1a : TCP RST is invalid if there is no corresponding TCP ACK (tcp.flags == 16) before belonging to the same session containing correct seq_nb and ack_nb.">
    <event value="COMPUTE" event_id="1"
           description="Context: TCP RST"
           boolean_expression="((tcp.rst == 1)&amp;&amp;((tcp.seq_nb == tcp.seq_nb)&amp;&amp;((tcp.ack_nb.2 != tcp.seq_nb)&amp;&amp;((ip.src.2 == ip.dst)&amp;&amp;(ip.dst.2 == ip.src)))))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: the last TCP ACK packets have different seg_nb and ack_nb"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((tcp.ack_nb == tcp.ack_nb)&amp;&amp;((tcp.seq_nb == tcp.seq_nb)&amp;&amp;(ip.src != ip.dst))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- Property 8: C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="8" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.options == ip.options)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- Property 9: C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="9" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 10: C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="10" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method == http.method)&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 11: C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="11" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 12: C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="12" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 13: C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="13" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 14: C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
 
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="14" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- Property 15: C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="15" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="((http.user_agent == http.user_agent)&amp;&amp;(#check_UA(http.user_agent) == 1))"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- Property 16: C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="16" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- Property 17: C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="17" type_property="SECURITY_PROPERTY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 18: C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="18" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- Property 19: C4_Analyse_04g : SQL Injection detection.-->
<!--

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="19" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="40" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="41" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="((ip.src != ip.dst) &amp;&amp; (tcp.p_payload == tcp.p_payload))"/>
</property>
-->

<!-- Property 20: C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="6" property_id="20" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- Property 21: IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="21" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- Property 22: IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="22" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Property 23: Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="23" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Property 24: Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="24" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Property 25: Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="25" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Property 26: Probable IP protocol scan (4 different attempts in a row on different protocols).
-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="20" property_id="26" type_property="ATTACK" 
    description="Probable IP protocol scan (4 different attempts in a row on different protocols)."
    >
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
          description="IP packet header with the eight-bit IP protocol field set (1)"
             boolean_expression="((ip.proto_id != 0)&amp;&amp;(ip.src != ip.dst))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP packet header with another eight-bit IP protocol field set (2)"
             boolean_expression="((ip.proto_id != ip.proto_id.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="IP packet header with another eight-bit IP protocol field set (3)"
             boolean_expression="((ip.proto_id != ip.proto_id.2)&amp;&amp;((ip.proto_id != ip.proto_id.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="IP packet header with another eight-bit IP protocol field set (4)"
             boolean_expression="((ip.proto_id != ip.proto_id.3)&amp;&amp;((ip.proto_id != ip.proto_id.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
    </operator>
</property>

<!-- Property 27: Probable UDP protocol scan (4 different attempts in a row on different ports).
-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="20" property_id="27" type_property="ATTACK" 
    description="Probable UDP protocol scan (4 different attempts in a row on different ports)."
    >
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
             description="UDP packet header with a destination port field set (1)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != 0)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="UDP packet header with another destination port field set (2)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != udp.dest_port.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="UDP packet header with another destination port field set (3)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != udp.dest_port.2)&amp;&amp;((udp.dest_port != udp.dest_port.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="UDP packet header with another destination port field set (4)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != udp.dest_port.3)&amp;&amp;((udp.dest_port != udp.dest_port.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))))"/>
    </operator>
</property>

    <!-- Property 28: XMAS s00can : TCP with all flags FIN, URG, PSH active.-->
    <property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="28" type_property="ATTACK"
         description="XMAS scan : TCP with all flags FIN, URG, PSH active.">
    <event value="COMPUTE" event_id="1"
         description="TCP packet with flag FIN active"
         boolean_expression="(tcp.urg == 1)"/>
    <event value="COMPUTE" event_id="2"
         description="TCP packet with flags URG and PSH active"
         boolean_expression="((tcp.fin == 1)&amp;&amp;(tcp.psh == 1))"/>
    </property>
	
	<!-- Property 29, 30: HTTP version 0.9 detection-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="29" type_property="EVASION" 
    description="HTTP response with no header (type 1)"
    >
   <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="250">
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
		   description="Context: TCP ACK after HTTP GET"
           boolean_expression="((#check_ip_add(ip.src, ip.dst, ip.src.1, ip.dst.1) == 1)&amp;&amp;((http.packet_count == http.packet_count.1)&amp;&amp;(tcp.packet_count != 0)))"/>
   </operator>
   <event value="COMPUTE" event_id="3" 
           description="Trigger: HTTP response contains no header"
		   boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.2+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="30" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
		   boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>
</beginning>
