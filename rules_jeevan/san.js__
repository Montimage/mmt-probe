var mmt = require('mmt-correlator');
var redis = require("redis");

var publisher = redis.createClient();

var neighborbourhood = []; //src, neighbor, + timestamp ?

function update_neighborbourhood (active_state, evt, msg, opts) {
  if (neighborbourhood[msg.data.value.orig] == null)  neighborbourhood[msg.data.value.orig] = [];
  //neighborbourhood[msg.data.value.orig][0] = msg.data.value.timestamp;
  neighborbourhood[msg.data.value.orig][msg.data.value.neighbor]= msg.data.value.type;
  console.log(neighborbourhood);
  return;
}

function check_property (active_state, evt, msg, opts) {
  if(neighborbourhood[msg.data.value.orig][msg.data.value.neighbor] >5 && neighborbourhood[msg.data.value.neighbor]!= null){
	if(neighborbourhood[msg.data.value.neighbor][msg.data.value.orig]==null || 
	   neighborbourhood[msg.data.value.neighbor][msg.data.value.orig] == 0 ||
	   neighborbourhood[msg.data.value.neighbor][msg.data.value.orig] == 3) { 
		MMT.emitVerdict(active_state, evt, msg, {value: false, property: 'Pr1'});
		console.log("verdict: false");
	} else {
		MMT.emitVerdict(active_state, evt, msg, {value: true, property: 'Pr1'});
		console.log("verdict: true");
	}
  }
  return;
}

var efsm = new mmt.EFSM(
{
  id: "Pr1",
  description: "If A declares a SYM/MPR link with B, then B must have been declared a ASYM/SYM/MPR link with A otherwise A is a liar",
  hascontext: true,
  logdata: true,
  onCreation: function() {},
  onDeletion: function() {},
  events: ['olsr.hello'],
  states: [
    {
      id: 'init'
    }
  ], //states MUST start with init!
  transitions: [
    {
      from: 'init',
      to: 'init',
      event: 'olsr.hello',
      conditions: [],
      actions: [{fct: update_neighborbourhood},{fct: check_property}]
    }
  ]
});


//San
//setTimeout(function(){ publisher.publish('olsr.hello', JSON.stringify(MMT.attributeJSON(1000, 'olsr.hello', '', {"timestamp":1000,"orig":"192.168.200.4","neighbor":"192.168.200.3", "type":6}, 'i1'))); }, 1000);
//setTimeout(function(){ publisher.publish('olsr.hello', JSON.stringify(MMT.attributeJSON(1000, 'olsr.hello', '', {"timestamp":1000,"orig":"192.168.200.4","neighbor":"192.168.200.5", "type":6}, 'i1'))); }, 1000);
//setTimeout(function(){ publisher.publish('olsr.hello', JSON.stringify(MMT.attributeJSON(2000, 'olsr.hello', '', {"timestamp":2000,"orig":"192.168.200.5","neighbor":"192.168.200.4", "type":6}, 'i1'))); }, 2000);


