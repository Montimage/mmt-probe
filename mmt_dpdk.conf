# This is the configuration file for MMT Probe

# unique-id given to the probe
probe-id-number = 3

# in case for PCAP the input mode can be online or offline, however for DPDK its only online
input-mode   = "online"
# path where the license key exists
license_file_path = "/opt/mmt/probe/bin/license.key"

# indicates where the log messages will be written to
logfile = "/opt/mmt/probe/log/online/log.data"	#default is "log.data" in the running folder

#input source for PCAP online mode (interface name) and for offline mode (pcap name), however for DPDK its interface port number
input-source = "0"

# indicates where the traffic reports will be dumped (CSV file)
file-output 
{ 
    enable = 0   # set to zero to disable file output (CSV), 1 to enable 
    data-file   = "dataoutput.csv"      # file name where the reports will be dumped
    location = "/opt/mmt/probe/result/report/online/" #location where files are written
    retain-files  = 10   # retains the last x sampled files, set to 0 to retain all files (retain-files > thread_nb +1)
    sampled_report = 1 # set to 1 if you need sampled file (every x seconds) or 0 if you need a single report
}

# indicates redis output
redis-output
{
    enabled = 0 # set to zero to disable publishing to redis, 1 to enable publishing to redis
    hostname = "localhost" # hostname of redis server
    port = 6379 # port number of redis server
}

# indicates kafka output
kafka-output
{
    enabled = 0 # set to zero to disable publishing to kafka, 1 to enable publishing to kafka
    hostname = "localhost" # hostname of kafka server
    port = 9092 # port number of kafka server
}				

# All the sections below are optional and can be enable or disable according to the requirements.
#thread configuration (default 1 thread), stats-period (default 5 seconds), file-output-period (default 5 seconds)

# indicates the threads configuration options

thread-nb    = 1    # the number of threads MMT will use for processing packets. Must be positive.
thread-queue = 3000 # the maximum number of packets queued for processing that a single thread accepts (only for PCAP). 
		    # 0 means MMT decides how many packets to queue (default =1000)
		    # If a packet is dispatched for a thread with a full queue the packet will be dropped and reported in MMT statistics
thread-data  = 0    # the maximum amount of data queued for processing that a single thread accepts (only for PCAP. 
		    # 0 means unlimited (will always be limited by the system memory)
		    # If a packet is dispatched for a thread with full data the packet will be dropped and reported in MMT statistics
					
snap-len = 0        # 0 means default value 65535, apparently what tcpdump uses for -s 0 (only for PCAP)	


#indicates mmt_security input and output (only with PCAP)
security1 
{       
    enable  = 0   # Set to 1 to perform security analysis, 0 to disable it
    # Indicates the format of the output result. 
    id = 10
    results-dir  = "/opt/mmt/probe/result/security/online/"   # folder where detected breaches will be reported
    properties-file   = "test_files/properties_all.xml"  #file containing security properties and rules
    
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
		        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1					         
                # kafka-output.enable =1 )	
					
}

#smp-security
security2
{
	enable        = 0		# Set to 1 to perform security analysis, 0 to disable it
	thread-nb     = 1		# Number of security threads per one probe thread, e.g., 
				# if we have 16 probe threads and thread-nb = 2 (security) => we have totally 16*2 security threads
				# Set to zero to use probe thread
						
	id            = 10	# id of output alerts
	exclude-rules = "" #range of rules to be excluded from the verification
	rules-mask    = ""	# Mask of rules to be verified. This distributes rules on security threads.
		 	 	 	 	# Format: rules-mask = (thread-index:rule-range) +
		 	 	 	 	#   	     thread-index = a number starting from 1
		 	 	 	 	#            rule-range = number,number-number
		 	 	 	 	# Example:  "(1:1,2,4-6)(2:3)" means:
		 	 	 		#        1. thread 1 verifies rules 1,2,4,5,6
		 	 	 	 	#        2. thread 2 verifies only rule 3 (in the case thread-nb >= 2)
		 	 	 	 	#        3. thread 3 verifies the rest (in the case thread-nb = 3)
													
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
		        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1	
}
#CPU and memory usage monitor					
cpu-mem-usage
{   enable = 0 # Set to 1 to perform cpu-mem reporting, 0 to disable it
    frequency = 5 # time-interval for reporting
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1                                          
                        # kafka-output.enable =1 )
}

#indicates behaviour analysis
behaviour
{
    enable  = 0                  # Set to 1 to perform behaviour analysis, zero to disable it
    location = "/opt/mmt/probe/result/behaviour/online/"  # location to store the output
}

# indicates ftp data reconstruction ( also set  session-report.enable =1 and condition-report.ftp.enable =1 )
reconstruct-ftp
{  #To enable the reconstruction session-report.enable and session-report.ftp_report.enable
should also be enabled.
    enable = 0 # Set to 1 to reconstruct ftp, 0 to disable it 
    id = 30   # Indicates the format-id of the output result.
    location  = "/opt/mmt/"
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1                                          
                        # kafka-output.enable =1 )
}

#socket configurations					
socket
{   enable = 0 #set to 1 to enable, 0 to disable it
    domain = 0 # 0 For Unix domain 0 and 1 for Internet domain and 2 for both
    socket-descriptor = "/opt/mmt/probe/bin/" # Required for UNIX domain, folder location where socket descriptor is created, For Internet domain blank	
    port = {5000} # Required for Internet domain, If one-socket-server = 0 then port field should have port numbers = thread_nb 
                  # If 1 port field should have only one port number
    server-address = {"localhost"} # Required for Internet domain, IP address of ip_host 1, ip_host 2 ..
    one-socket-server = 1 # if 0 the server contains multiple sockets to receive reports, if 1 only one socket to receive reports 
} 

#This report is for  host1
security-report localhost{
    enable = 0 # set to 1 to enable reporting to host 1, 0 to disable
    event = {"null"} # if condition is assign to "null" (used to indicate non-http branch) and "http" to indicate http branch 
    rule-type = 0 # rule type 1 for simple rule, 2 for complex rules and 0 otherwise
    #Indicates the list of attributes that are reported when a event is triggered.
    attributes = {"ip.dst","ip.src","tcp.dest_port","tcp.flags","arp.ar_op","arp.ar_sha","arp.ar_sip","ethernet.dst","ethernet.src","tcp.seq_nb","tcp.ack_nb","ip.mf_flag","ip.frag_offset","ip.tot_len","meta.packet_len","tcp.payload_len","tcp.src_port","ip.identification","tcp.urg","tcp.fin","tcp.psh" }

}

#This report is for security multisession reporting 
security-report-multisession remote{
    enable = 0 # set to 1 to perform multi-sessionreporting, 0 to disable it
    #Indicates the list of attributes that are reported.
    attributes = { "nfs.file_name"}
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1                                         
                        # kafka-output.enable =1 )
}


#indicates the strategy for RADIUS reporting
radius-output
{
    enable = 0 # set to 1 for reporting radius output , 0 to disable
    include-msg = 0    # Indicates the message we want to report. 
                       # Set to n = 0 in order to report all messages (ANY).
                       # Set to n > 0 to indicate the message (1 = include-msg, 2 = include-condition)
    include-condition = 0    # Indicates the condition to be met in order to report a msg.
			     # Set to n = 1 (IP-MSISDN) indicates report if IP to MSISDN mapping is present. 
											#   This is the only supported condition for this version. 
											#   Set to n = 0 (NONE) to skip the condition.
											
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: redis
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1
                        # kafka-output.enable =1 )
}

data-output
{
    include-user-agent = 32 	# Indicates the threshold in terms of data volume for parsing the user agent in Web traffic.
				# The value is in KiloBytes. If the value is zero it indicates to always parse the user agent.
				# To disable the user agent parsing set the threshold to a negative value (-1)

}

#Specifies the criteria to consider a flow as micro flow
micro-flows 
{ 
    enable = 0                    # set to 1 for reporting microflows stats, 0 to disable 
    id = 8                        # Indicates the report_id of the output report
    include-packet-count = 20     # packets count threshold to include as micro flow
    include-byte-count   = 20     # data volume threshold in KB to include as micro flow
    report-packet-count  = 10     # packets count threshold to report micro flows aggregated statistics
    report-byte-count    = 10     # data volume threshold in KB to report micro flows aggregated statistics
    report-flow-count    = 5      # flows count threshold to report micro flows aggregated statistics    
    output-channel = {} 	  # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                       		  # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        	  # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1 
                              # kafka-output.enable =1 )
}

# Specifies the session timeout time in seconds for different type of applications
session-timeout 
{ 
    default-session-timeout = 40 # 0 means default value that is 60 seconds. 
    long-session-timeout = 0     # 0 means default value that is 600 seconds .This is reasonable for Web and SSL connections especially when long polling is used.
    							#  Usually applications have a long polling period of about 3~5 minutes.
    short-session-timeout = 0    # 0 means default value that is 15 seconds.
    live-session-timeout  = 0    # 0 means default value that is 1500 seconds.For persistant connections like messaging applications and so on.  
}

# indicates event based reporting
event_report report1
{ 
    enable = 0 # set to 1 for reporting event reports, 0 to disable     
    id = 1000 # Indicates the format of the output result
    event = "ip.src" # Indicates the event 
    attributes = {"arp.ar_hln", "ip.src"} # Indicates the list of attributes that are reported when a event is triggered
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1
                        # kafka-output.enable =1 )
}

# indicates session based reporting
session-report report_session
{ 
    enable = 0 # Set to 1 for reporting session reports, 0 to disable
    output-channel = {} # Output reports to the channel, output-channel (string) can be redis, kafka, file. default: file
                        # More than one output-channel is possible, if so inputs should be comma-separated value for example: {redis, kafka, files)
                        # Output reports are send to channels only when the global parameters are enable (file-output.enable =1, redis-output.enable =1 
                        # kafka-output.enable =1 )
}

# indicates condition based reporting and registering handlers from configuration file

condition_report report_web
{
     enable = 0        # Set to 1 for reporting web reports, 0 to disable 
     				   # Output reports are send to channels only when session-report.enable =1 
     id = 1            # Indicates the format of the output result
     condition = "WEB" # Indicates the condition   
    # Indicates the list of attributes that are reported when a condition is satisifed.
     attributes = {"http.uri", "http.method", "http.response", "http.content_type", "http.host", "http.user_agent", "http.referer", "http.xcdn_seen", "http.content_len"}
     handlers = {"uri_handle", "http_method_handle", "http_response_handle", "mime_handle", "host_handle", "useragent_handle", "referer_handle", "xcdn_seen_handle", "content_len_handle"}   
}
condition_report report_ftp 
{
     enable = 0         # Set to 1 for reporting ftp reports, 0 to disable
     					# Output reports are send to channels only when session-report.enable =1     
     id = 4             # Indicates the format of the output result
     condition = "FTP"  # Indicates the format of the output result
    # Indicates the list of attributes that are reported when a condition is satisifed.
     attributes = {"ftp.data_direction", "ftp.p_payload", "ftp.packet_type", "ftp.packet_payload_len", "ftp.data_type", "ftp.file_name", "ftp.packet_request", "ftp.packet_request_parameter", "ftp.packet_response_code", "ftp.packet_reponse_value", "ftp.transfer_type", "ftp.ftp_session_mode", "ftp.file_last_modified", "ftp.session_connection_type", "ftp.user_name", "ftp.password", "ftp.last_command", "ftp.last_response_code", "ftp.file_size", "ftp.control_ip_session_id"}
     handlers = {"NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "ftp_response_value_handle", "NULL", "NULL", "NULL", "ftp_session_connection_type_handle", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL"}   

}
condition_report report_rtp
{
     enable = 0        # Set to 1 for reporting rtp reports, 0 to disable 
     				   # Output reports are send to channels only when session-report.enable =1  
     id = 3            # Indicates the format of the output result. 
     condition = "RTP" # Indicates the condition.   
    # Indicates the list of attributes that are reported when a condition is satisifed.
     attributes = {"rtp.version", "rtp.jitter", "rtp.loss", "rtp.order_err", "rtp.burst_loss"}
     handlers = {"rtp_version_handle", "rtp_jitter_handle", "rtp_loss_handle", "rtp_order_error_handle", "rtp_burst_loss_handle"}   
}
# set reconstruct_http.enable = 1 and session-report.enable =1 for http_reconstruction
condition_report reconstruct_http
{
     enable = 0   # Set to 1 for http reconstruction, 0 to disable
     			  # Output reports are send to channels only when session-report.enable =1   
     id = 3       # Indicates the format of the output result. 
     condition = "HTTP-RECONSTRUCT"      # Indicates the condition.   
     location = "" # Location where the files are reconstructed
    # Indicates the list of attributes that are reported when a condition is satisifed.
     attributes = {"tcp.payload_len", "tcp.p_payload", "http.msg_start", "http.header", "http.headers_end", "http.data", "http.msg_end", "http.method", "http.response","http.content_type","http.uri"}
     handlers = {"NULL", "NULL", "http_message_start_handle", "http_generic_header_handle","http_headers_end_handle","http_data_handle","http_message_end_handle","NULL","NULL","NULL","NULL","NULL"}   
}

condition_report report_ssl
{
     enable = 0        # Set to 1 for ssl reporting, 0 to disable 
     				   # Output reports are send to channels only when session-report.enable =1  
     id = 2            # Indicates the format of the output result.  
     condition = "SSL" # Indicates the condition.     
    # Indicates the list of attributes that are reported when a condition is satisifed.
     attributes = {"ssl.server_name"}
     handlers = {"ssl_server_name_handle"}   
}

cache-size-for-reporting = 300000  # this is the maximum number of reports queued before flushing to a file (cache_size)
             		           # 0 means MMT decides how many packets to queue (default =300000)
					               
enable-proto-without-session-stat = 0 # if 1 enable the protocol statics for the protocols that does not belongs to any session
enable-IP-fragmentation-report = 0 # if 1 enable the IP_fragmentation_report 
stats-period = 5 #period in seconds, indicates the periodicity for reports
file-output-period = 5 #sampled reporting # indicates the periodicity for reporting output file period 
num-of-report-per-msg = 1 # indicates the number of report per msg for security report (sockets), default is 1



